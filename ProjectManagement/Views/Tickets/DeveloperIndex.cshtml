@model IEnumerable<ProjectManagement.viewModels.TicketIndexVM>
@using ProjectManagement.CustomHelpers;
@{
    ViewData["Title"] = "Index";
}

<h1 class="text-center"> Tickets </h1>


<div class="container">
    <div class="row text-center">
            <div class="col">
                <h5>@StatusEnum.Pending.ToString()</h5>
            <div class="status-container" id=@StatusEnum.Pending.ToString()>
                    @foreach (var item in Model)
                    {
                        if (item.Status == StatusEnum.Pending)
                        {
                            <div class="alert alert-primary ticket" role="alert"id="@item.Id">
                                @Html.DisplayFor(modelItem => item.Name)
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="col">
            <h5>@StatusEnum.Started.ToString()</h5>
            <div class="status-container" id=@StatusEnum.Started.ToString()>
                    @foreach (var item in Model)
                    {
                    if (item.Status == StatusEnum.Started)
                        {
                            <div class="alert alert-primary" role="alert" id="@item.Id">
                                @Html.DisplayFor(modelItem => item.Name)
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="col">
            <h5>@StatusEnum.Blocked.ToString()</h5>
            <div class="status-container" id=@StatusEnum.Blocked.ToString()>
                    @foreach (var item in Model)
                    {
                    if (item.Status == StatusEnum.Blocked)
                        {
                            <div class="alert alert-primary" role="alert" id="@item.Id">
                                @Html.DisplayFor(modelItem => item.Name)
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="col">
            <h5>@StatusEnum.Completed.ToString()</h5>
            <div class="status-container" id=@StatusEnum.Completed.ToString()>
                    @foreach (var item in Model)
                    {
                    if (item.Status == StatusEnum.Completed)
                        {
                            <div class="alert alert-primary" role="alert" id="@item.Id">
                                @Html.DisplayFor(modelItem => item.Name)
                            </div>
                        }
                    }
                </div>
            </div>
    </div>
</div>

@section Scripts {
    <script>
        debugger;

        const pending = document.getElementById("@StatusEnum.Pending.ToString()");
        const started = document.getElementById("@StatusEnum.Started.ToString()");
        const blocked = document.getElementById("@StatusEnum.Blocked.ToString()");
        const completed = document.getElementById("@StatusEnum.Completed.ToString()");
        const containers = [pending, started, blocked, completed];

        const drake = dragula(containers);
        const drop = (el, target) => {
            const id = el.id;
            //const selectedStatus = target.id.charAt(0).toUpperCase() + target.id.slice(1);
            const selectedStatus = target.id;
            debugger;
            const url = '@Url.Action("EditTicketStatus","Tickets")/' + id;
            fetch(url, {
                method: 'POST',
                headers:{
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(selectedStatus)
             })
            .then(response=>{
                    if (!response.ok) console.error("Unable to update item status!");
            })
            .catch(error => console.error("Unable to update item status!"));
        };

        drake.on('drop', drop);
    </script>
}




